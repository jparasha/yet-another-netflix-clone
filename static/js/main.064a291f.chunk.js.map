{"version":3,"sources":["axiosInterceptor.js","Components/Row.js","Components/Banner.js","Components/Nav.js","requests.js","App.js","reportWebVitals.js","index.js"],"names":["interceptor","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","console","log","fetchData","className","length","map","movie","backdrop_path","src","poster_path","alt","name","loading","id","Banner","banner","setBanner","Math","floor","random","str","n","style","backgroundImage","backgroundSize","backdropPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.064a291f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst interceptor = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default interceptor;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from '../axiosInterceptor';\r\nimport './Row.css';\r\n\r\nconst baseImgUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            console.log(request.data.results, fetchUrl);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className={`row__posters ${isLargeRow && 'row__posters-large'}`}>\r\n                {\r\n                    movies.length && movies.map(movie => (\r\n                        movie.backdrop_path && (\r\n                            <img\r\n                                className={`row__poster ${isLargeRow && 'row__poster-large'}`}\r\n                                src={`${baseImgUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                                alt={movie.name}\r\n                                key={movie.id}\r\n                                loading='lazy'\r\n                            />\r\n                        )\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Row;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from '../axiosInterceptor';\r\nimport './Banner.css';\r\n\r\n\r\nconst Banner = ({ fetchUrl }) => {\r\n    const [banner, setBanner] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setBanner(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const baseImgUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\n    console.log(banner);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n    return (\r\n        <header\r\n            className='banner'\r\n            style={{\r\n                backgroundImage: `radial-gradient(transparent, #000000db), url('${baseImgUrl}${banner?.backdrop_path}')`,\r\n                backgroundSize: 'cover',\r\n                backdropPosition: 'center center'\r\n            }}\r\n        >\r\n            {/* Background image */}\r\n            <div className='banner__contents'>\r\n                {/* title */}\r\n                <h1 className='banner__title'>\r\n                    {banner?.title || banner?.name || banner?.original_name}\r\n                </h1>\r\n\r\n                {/* 2 buttons */}\r\n                <div className='banner__buttons'>\r\n                    <button className='banner__button'>Play</button>\r\n                    <button className='banner__button'>My List </button>\r\n                </div>\r\n\r\n                {/* description */}\r\n                <h1 className='banner__description'>{truncate(banner?.overview, 200)}</h1>\r\n            </div>\r\n            <div className='banner__fadeBottom' />\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else {\r\n                handleShow(false);\r\n            }\r\n        });\r\n        return () => {\r\n            window.removeEventListener('scroll');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav__black'}`}>\r\n            <img\r\n                className='nav__logo'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png'\r\n                alt='Netflix Logo'\r\n            />\r\n            <img\r\n                className='nav__avatar'\r\n                src='https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png'\r\n                alt='Avatar'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","// https://github.com/sharananurag998/netflix-clone/blob/master/src/axios.js\r\nconst API_KEY = process.env.REACT_APP_MOVIES_API_KEY || '';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import './App.css';\nimport Row from './Components/Row';\nimport Banner from './Components/Banner';\nimport Nav from './Components/Nav';\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Nav */}\n      <Nav />\n\n      {/* Banner */}\n      <Banner fetchUrl={requests.fetchNetflixOriginals} />\n\n      {/* Rows */}\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title={'Trending Now'} fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}