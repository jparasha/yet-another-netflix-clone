{"version":3,"sources":["axiosInterceptor.js","Components/Row.js","Components/Banner.js","Components/Nav.js","requests.js","App.js","reportWebVitals.js","index.js"],"names":["interceptor","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","rowId","playerId","updateCurrentPlayerRow","useState","movies","setMovies","videoId","setVideoId","useEffect","a","get","request","data","results","fetchData","handlePosterClick","movie","id","process","trailerId","key","className","length","map","backdrop_path","src","poster_path","alt","name","loading","onClick","opts","height","width","playerVars","autoplay","Banner","banner","setBanner","Math","floor","random","str","n","console","log","style","backgroundImage","backgroundSize","backdropPosition","original_name","overview","substr","Nav","show","handleShow","handleScrollEvent","window","scrollY","addEventListener","removeEventListener","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","App","setPlayerId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcb12d58.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst interceptor = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default interceptor;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from '../axiosInterceptor';\r\nimport YouTube from 'react-youtube';\r\nimport './Row.css';\r\n\r\nconst baseImgUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow, rowId, playerId, updateCurrentPlayerRow }) => {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [videoId, setVideoId] = useState('');\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 0\r\n        }\r\n    };\r\n\r\n    const handlePosterClick = async movie => {\r\n        try {\r\n            const trailerId = await axios.get(`/movie/${movie.id}/videos?api_key=${process.env.REACT_APP_MOVIES_API_KEY || ''}`);\r\n            (trailerId?.data?.results[0]?.key !== videoId) && setVideoId(trailerId.data.results[0]?.key);\r\n            updateCurrentPlayerRow(rowId);\r\n        } catch (error) {\r\n            setVideoId('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className={`row__posters ${isLargeRow && 'row__posters-large'}`}>\r\n                {\r\n                    movies.length && movies.map(movie => (\r\n                        movie.backdrop_path && (\r\n                            <img\r\n                                className={`row__poster ${isLargeRow && 'row__poster-large'}`}\r\n                                src={`${baseImgUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                                alt={movie.name}\r\n                                key={movie.id}\r\n                                loading='lazy'\r\n                                onClick={() => handlePosterClick(movie)}\r\n                            />\r\n                        )\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                (!playerId || playerId === rowId) && videoId && <div className={'row__player'}>\r\n                    <YouTube videoId={videoId} opts={opts} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Row;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from '../axiosInterceptor';\r\nimport './Banner.css';\r\n\r\n\r\nconst Banner = ({ fetchUrl }) => {\r\n    const [banner, setBanner] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setBanner(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const baseImgUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\n    console.log(banner);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n    return (\r\n        <header\r\n            className='banner'\r\n            style={{\r\n                backgroundImage: `radial-gradient(transparent, #000000db), url('${baseImgUrl}${banner?.backdrop_path}')`,\r\n                backgroundSize: 'cover',\r\n                backdropPosition: 'center center'\r\n            }}\r\n        >\r\n            {/* Background image */}\r\n            <div className='banner__contents'>\r\n                {/* title */}\r\n                <h1 className='banner__title'>\r\n                    {banner?.title || banner?.name || banner?.original_name}\r\n                </h1>\r\n\r\n                {/* 2 buttons */}\r\n                <div className='banner__buttons'>\r\n                    <button className='banner__button'>Play</button>\r\n                    <button className='banner__button'>My List </button>\r\n                </div>\r\n\r\n                {/* description */}\r\n                <h1 className='banner__description'>{truncate(banner?.overview, 200)}</h1>\r\n            </div>\r\n            <div className='banner__fadeBottom' />\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const handleScrollEvent = () => handleShow(window.scrollY > 100);\r\n        window.addEventListener('scroll', handleScrollEvent);\r\n        return () => (window.removeEventListener('scroll', handleScrollEvent));\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav__black'}`}>\r\n            <img\r\n                className='nav__logo'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png'\r\n                alt='Netflix Logo'\r\n            />\r\n            <img\r\n                className='nav__avatar'\r\n                src='https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png'\r\n                alt='Avatar'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","// https://github.com/sharananurag998/netflix-clone/blob/master/src/axios.js\r\nconst API_KEY = process.env.REACT_APP_MOVIES_API_KEY || '';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Row from './Components/Row';\r\nimport Banner from './Components/Banner';\r\nimport Nav from './Components/Nav';\r\nimport requests from \"./requests\";\r\n\r\nfunction App() {\r\n  const [playerId, setPlayerId] = useState(0);\r\n\r\n  const updateCurrentPlayerRow = id => setPlayerId(id);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Nav */}\r\n      <Nav />\r\n\r\n      {/* Banner */}\r\n      <Banner fetchUrl={requests.fetchNetflixOriginals} />\r\n\r\n      {/* Rows */}\r\n      <Row\r\n        rowId={1}\r\n        isLargeRow\r\n        playerId={playerId}\r\n        title=\"Netflix Originals\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        updateCurrentPlayerRow={updateCurrentPlayerRow}\r\n      />\r\n      <Row title={'Trending Now'} fetchUrl={requests.fetchTrending} rowId={2} playerId={playerId} updateCurrentPlayerRow={updateCurrentPlayerRow} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} rowId={3} playerId={playerId} updateCurrentPlayerRow={updateCurrentPlayerRow} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} rowId={4} playerId={playerId} updateCurrentPlayerRow={updateCurrentPlayerRow} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} rowId={5} playerId={playerId} updateCurrentPlayerRow={updateCurrentPlayerRow} />\r\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} rowId={6} playerId={playerId} updateCurrentPlayerRow={updateCurrentPlayerRow} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} rowId={7} playerId={playerId} updateCurrentPlayerRow={updateCurrentPlayerRow} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}